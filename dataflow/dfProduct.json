{
	"name": "dfProduct",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_ADLS_CSV_FILE_GENERIC",
						"type": "DatasetReference"
					},
					"name": "sourceProduct"
				},
				{
					"dataset": {
						"referenceName": "DS_ADLS_CSV_FILE_GENERIC",
						"type": "DatasetReference"
					},
					"name": "sourceproductCategory"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_ADLS_CSV_FILE_GENERIC",
						"type": "DatasetReference"
					},
					"name": "Target"
				},
				{
					"dataset": {
						"referenceName": "DS_ADLS_CSV_FILE_GENERIC",
						"type": "DatasetReference"
					},
					"name": "TargetOther"
				}
			],
			"transformations": [
				{
					"name": "joinProductAndCategory"
				},
				{
					"name": "select1"
				},
				{
					"name": "split1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     RoadBikeFileName as string ('test.csv'),",
				"     OtherFileName as string ('test1.csv')",
				"}",
				"source(output(",
				"          ProductID as short,",
				"          Name as string,",
				"          ProductNumber as string,",
				"          Color as string,",
				"          StandardCost as double,",
				"          ListPrice as double,",
				"          Size as string,",
				"          Weight as double,",
				"          ProductCategoryID as short,",
				"          ProductModelID as short,",
				"          SellStartDate as string,",
				"          SellEndDate as string,",
				"          DiscontinuedDate as string,",
				"          ThumbNailPhoto as string,",
				"          ThumbnailPhotoFileName as string,",
				"          rowguid as string,",
				"          ModifiedDate as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceProduct",
				"source(output(",
				"          ProductCategoryID as short,",
				"          ParentProductCategoryID as short,",
				"          Name as string,",
				"          rowguid as string,",
				"          ModifiedDate as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceproductCategory",
				"sourceProduct, sourceproductCategory join(sourceProduct@ProductCategoryID == sourceproductCategory@ProductCategoryID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinProductAndCategory",
				"joinProductAndCategory select(mapColumn(",
				"          ProductID,",
				"          ProductName = sourceProduct@Name,",
				"          ProductCategoryName = sourceproductCategory@Name,",
				"          ProductNumber,",
				"          Color,",
				"          StandardCost,",
				"          ListPrice,",
				"          Size,",
				"          Weight,",
				"          ProductModelID,",
				"          SellStartDate,",
				"          SellEndDate,",
				"          DiscontinuedDate,",
				"          ThumbNailPhoto,",
				"          ThumbnailPhotoFileName,",
				"          rowguid = sourceProduct@rowguid,",
				"          ModifiedDate = sourceProduct@ModifiedDate",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 split(equals(ProductCategoryName,'Road Frames'),",
				"     disjoint: false) ~> split1@(RoadBikesProduct, OtherProduct)",
				"split1@RoadBikesProduct sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string,",
				"          Column_6 as string,",
				"          Column_7 as string,",
				"          Column_8 as string,",
				"          Column_9 as string,",
				"          Column_10 as string,",
				"          Column_11 as string,",
				"          Column_12 as string,",
				"          Column_13 as string,",
				"          Column_14 as string",
				"     ),",
				"     partitionFileNames:[($RoadBikeFileName)],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> Target",
				"split1@OtherProduct sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string,",
				"          Column_6 as string,",
				"          Column_7 as string,",
				"          Column_8 as string,",
				"          Column_9 as string,",
				"          Column_10 as string,",
				"          Column_11 as string,",
				"          Column_12 as string,",
				"          Column_13 as string,",
				"          Column_14 as string",
				"     ),",
				"     partitionFileNames:[($OtherFileName)],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> TargetOther"
			]
		}
	}
}